#! /bin/bash

# Hello! Welcome to the Pet Diary Tooling or pdt for short!
# This tooling is designed to make the development process a bit easier.

source ./tooling.sh

pdt-help() {
    echo " ____  ____ _____ "
    echo "|  _ \|  _ \_   _|"
    echo "| |_) | | | || |  "
    echo "|  __/| |_| || |  "
    echo "|_|   |____/ |_|  "
    echo
    echo "Pet Diary Tooling"
    echo
    echo "Hi, you've found the help page!"
    echo "Enter the command 'pdt help' if you wish to see this message again."
    echo "You will also see this message anytime you fail to spell a pdt command correctly too."
    echo
    echo "Usage: pdt [COMMAND]"
    echo
    echo "COMMANDS:"
    echo
    echo "    activate"
    echo "        This is just a shortcut for activating your Python Virtual Environment"
    echo
    echo "    aws-login"
    echo "        This logs you in via SSO after selecting a profile from you AWS config"
    echo
    echo "    aws-add-test-profile"
    echo "        This simply adds an exra profile to ~/.aws/config. The profile should be broken enough that it won't"
    echo "        work, but not so broken that botocore will refuse to make the API call. This test profile is used in"
    echo "        certain test scenarios."
    echo
    echo "    sam-deploy"
    echo "        This will deploy you application"
    echo
    echo "    sam-destroy"
    echo "        This will tear down the application leaving nothing in AWS"
    echo
    echo "    lint-python"
    echo "        This will lint your Python code using flake8,"
    echo "        it will start in the current directory and exclude the venv"
    echo
    echo "    test-python"
    echo "        This will run pytest against the tests/ directory in very verbose mode"
    echo
    echo "    coverage-python [OPTION]"
    echo "        This will generate a test coverage report for you"
    echo "        OPTIONS:"
    echo "            html"
    echo "                - Generates an interactive coverage report and opens it in your browser"
    echo "            term"
    echo "                - Generates a tabular output directly to the terminal (handy if you don't have a browser)"
    echo
    echo "    configure-venv"
    echo "        This will set up your virtual environment for you, it is the reccomended way to do so"
    echo
    echo "    install-grype"
    echo "        This will install the security tooling needed for 3rd party dependency checking"
    echo
    echo "    security-cloud"
    echo "        This will run the chekov security scanner against your sam-template"
    echo
    echo "    security-libraries"
    echo "        This will run Grype against the project directory, which will find 3rd party security issues. These"
    echo "        3rd party issues will be in imported and installed libraries and such"
    echo
    echo "    security-python"
    echo "        This will run Bandit on the app/ directory. Bandit scans your Python code for secuirty issues, it does"
    echo "        not check any imported or installed libraries for secuirty flaws though, that has to be done with"
    echo "        'pdt third-party-security-check'."
    echo
    echo "    security-all"
    echo "        This will run each of the security checks consecutively and can be redirected into a text file to form"
    echo "        a security audit report."
    echo "        The included security checks are:"
    echo "            - Bandit (for Python code)"
    echo "            - Checkov (for SAM template)"
    echo "            - Grype (for 3rd party vulnerabilities)"
    echo
    echo "    help"
    echo "        Shows this message but in the 'less' reader and exits with status 0"
}


pdt() {
    case "$1" in
        "activate")
            . ./pet-diary-venv/bin/activate
            ;;
        "aws-login")
            aws-login
            ;;
        "aws-add-test-profile")
            aws-add-test-profile
            ;;
        "security-cloud")
            sam-check
            ;;
        "sam-deploy")
            sam-deploy
            ;;
        "sam-destroy")
            sam-destroy
            ;;
        "lint-python")
            python-lint
            ;;
        "test-python")
            python-test
            ;;
        "coverage-python")
            coverage-python "$2"
            ;;
        "security-python")
            python-security-check
            ;;
        "configure-venv")
            configure-venv
            ;;
        "security-libraries")
            third-party-security-check
            ;;
        "security-all")
            full-security-check
            ;;
        "install-grype")
            install-anchore-security-tools
            ;;
        "help")
            pdt-help | less
            ;;
        "alt-help")
            pdt-help
            ;;
        *)
            pdt-help
            return 1  # Just to point out that you done biffed it
            ;;
    esac
}

pdt "$1"
